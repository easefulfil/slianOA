<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.slianOAsys.dao.SysBasicDataSetMapper" >
  <resultMap id="BaseResultMap" type="com.slianOAsys.model.SysBasicDataSet" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="basic_data_id" property="basicDataId" jdbcType="INTEGER" />
    <result column="Chinese_name" property="chineseName" jdbcType="VARCHAR" />
    <result column="English_name" property="englishName" jdbcType="VARCHAR" />
    <result column="parent_node_id" property="parentNodeId" jdbcType="INTEGER" />
    <result column="basic_data_type" property="basicDataType" jdbcType="VARCHAR" />
    <result column="basic_data_status" property="basicDataStatus" jdbcType="VARCHAR" />
    <result column="basic_data_remark" property="basicDataRemark" jdbcType="VARCHAR" />
    <result column="basic_data_popularity" property="basicDataPopularity" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    basic_data_id, Chinese_name, English_name, parent_node_id, basic_data_type, basic_data_status, 
    basic_data_remark, basic_data_popularity
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.slianOAsys.model.SysBasicDataSetExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sys_basic_data_set
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from sys_basic_data_set
    where basic_data_id = #{basicDataId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from sys_basic_data_set
    where basic_data_id = #{basicDataId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.slianOAsys.model.SysBasicDataSetExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from sys_basic_data_set
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.slianOAsys.model.SysBasicDataSet" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into sys_basic_data_set (basic_data_id, Chinese_name, English_name, 
      parent_node_id, basic_data_type, basic_data_status, 
      basic_data_remark, basic_data_popularity)
    values (#{basicDataId,jdbcType=INTEGER}, #{chineseName,jdbcType=VARCHAR}, #{englishName,jdbcType=VARCHAR}, 
      #{parentNodeId,jdbcType=INTEGER}, #{basicDataType,jdbcType=VARCHAR}, #{basicDataStatus,jdbcType=VARCHAR}, 
      #{basicDataRemark,jdbcType=VARCHAR}, #{basicDataPopularity,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.slianOAsys.model.SysBasicDataSet" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into sys_basic_data_set
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="basicDataId != null" >
        basic_data_id,
      </if>
      <if test="chineseName != null" >
        Chinese_name,
      </if>
      <if test="englishName != null" >
        English_name,
      </if>
      <if test="parentNodeId != null" >
        parent_node_id,
      </if>
      <if test="basicDataType != null" >
        basic_data_type,
      </if>
      <if test="basicDataStatus != null" >
        basic_data_status,
      </if>
      <if test="basicDataRemark != null" >
        basic_data_remark,
      </if>
      <if test="basicDataPopularity != null" >
        basic_data_popularity,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="basicDataId != null" >
        #{basicDataId,jdbcType=INTEGER},
      </if>
      <if test="chineseName != null" >
        #{chineseName,jdbcType=VARCHAR},
      </if>
      <if test="englishName != null" >
        #{englishName,jdbcType=VARCHAR},
      </if>
      <if test="parentNodeId != null" >
        #{parentNodeId,jdbcType=INTEGER},
      </if>
      <if test="basicDataType != null" >
        #{basicDataType,jdbcType=VARCHAR},
      </if>
      <if test="basicDataStatus != null" >
        #{basicDataStatus,jdbcType=VARCHAR},
      </if>
      <if test="basicDataRemark != null" >
        #{basicDataRemark,jdbcType=VARCHAR},
      </if>
      <if test="basicDataPopularity != null" >
        #{basicDataPopularity,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.slianOAsys.model.SysBasicDataSetExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from sys_basic_data_set
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sys_basic_data_set
    <set >
      <if test="record.basicDataId != null" >
        basic_data_id = #{record.basicDataId,jdbcType=INTEGER},
      </if>
      <if test="record.chineseName != null" >
        Chinese_name = #{record.chineseName,jdbcType=VARCHAR},
      </if>
      <if test="record.englishName != null" >
        English_name = #{record.englishName,jdbcType=VARCHAR},
      </if>
      <if test="record.parentNodeId != null" >
        parent_node_id = #{record.parentNodeId,jdbcType=INTEGER},
      </if>
      <if test="record.basicDataType != null" >
        basic_data_type = #{record.basicDataType,jdbcType=VARCHAR},
      </if>
      <if test="record.basicDataStatus != null" >
        basic_data_status = #{record.basicDataStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.basicDataRemark != null" >
        basic_data_remark = #{record.basicDataRemark,jdbcType=VARCHAR},
      </if>
      <if test="record.basicDataPopularity != null" >
        basic_data_popularity = #{record.basicDataPopularity,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sys_basic_data_set
    set basic_data_id = #{record.basicDataId,jdbcType=INTEGER},
      Chinese_name = #{record.chineseName,jdbcType=VARCHAR},
      English_name = #{record.englishName,jdbcType=VARCHAR},
      parent_node_id = #{record.parentNodeId,jdbcType=INTEGER},
      basic_data_type = #{record.basicDataType,jdbcType=VARCHAR},
      basic_data_status = #{record.basicDataStatus,jdbcType=VARCHAR},
      basic_data_remark = #{record.basicDataRemark,jdbcType=VARCHAR},
      basic_data_popularity = #{record.basicDataPopularity,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.slianOAsys.model.SysBasicDataSet" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sys_basic_data_set
    <set >
      <if test="chineseName != null" >
        Chinese_name = #{chineseName,jdbcType=VARCHAR},
      </if>
      <if test="englishName != null" >
        English_name = #{englishName,jdbcType=VARCHAR},
      </if>
      <if test="parentNodeId != null" >
        parent_node_id = #{parentNodeId,jdbcType=INTEGER},
      </if>
      <if test="basicDataType != null" >
        basic_data_type = #{basicDataType,jdbcType=VARCHAR},
      </if>
      <if test="basicDataStatus != null" >
        basic_data_status = #{basicDataStatus,jdbcType=VARCHAR},
      </if>
      <if test="basicDataRemark != null" >
        basic_data_remark = #{basicDataRemark,jdbcType=VARCHAR},
      </if>
      <if test="basicDataPopularity != null" >
        basic_data_popularity = #{basicDataPopularity,jdbcType=INTEGER},
      </if>
    </set>
    where basic_data_id = #{basicDataId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.slianOAsys.model.SysBasicDataSet" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sys_basic_data_set
    set Chinese_name = #{chineseName,jdbcType=VARCHAR},
      English_name = #{englishName,jdbcType=VARCHAR},
      parent_node_id = #{parentNodeId,jdbcType=INTEGER},
      basic_data_type = #{basicDataType,jdbcType=VARCHAR},
      basic_data_status = #{basicDataStatus,jdbcType=VARCHAR},
      basic_data_remark = #{basicDataRemark,jdbcType=VARCHAR},
      basic_data_popularity = #{basicDataPopularity,jdbcType=INTEGER}
    where basic_data_id = #{basicDataId,jdbcType=INTEGER}
  </update>
</mapper>