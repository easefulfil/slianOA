package com.slianOAsys.model;

import java.util.ArrayList;
import java.util.List;

public class SignLocationExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    public SignLocationExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andStatusIsNull() {
            addCriterion("status is null");
            return (Criteria) this;
        }

        public Criteria andStatusIsNotNull() {
            addCriterion("status is not null");
            return (Criteria) this;
        }

        public Criteria andStatusEqualTo(Integer value) {
            addCriterion("status =", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotEqualTo(Integer value) {
            addCriterion("status <>", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThan(Integer value) {
            addCriterion("status >", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanOrEqualTo(Integer value) {
            addCriterion("status >=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThan(Integer value) {
            addCriterion("status <", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThanOrEqualTo(Integer value) {
            addCriterion("status <=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusIn(List<Integer> values) {
            addCriterion("status in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotIn(List<Integer> values) {
            addCriterion("status not in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusBetween(Integer value1, Integer value2) {
            addCriterion("status between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotBetween(Integer value1, Integer value2) {
            addCriterion("status not between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeIsNull() {
            addCriterion("sign_longitude is null");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeIsNotNull() {
            addCriterion("sign_longitude is not null");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeEqualTo(Double value) {
            addCriterion("sign_longitude =", value, "signLongitude");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeNotEqualTo(Double value) {
            addCriterion("sign_longitude <>", value, "signLongitude");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeGreaterThan(Double value) {
            addCriterion("sign_longitude >", value, "signLongitude");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeGreaterThanOrEqualTo(Double value) {
            addCriterion("sign_longitude >=", value, "signLongitude");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeLessThan(Double value) {
            addCriterion("sign_longitude <", value, "signLongitude");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeLessThanOrEqualTo(Double value) {
            addCriterion("sign_longitude <=", value, "signLongitude");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeIn(List<Double> values) {
            addCriterion("sign_longitude in", values, "signLongitude");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeNotIn(List<Double> values) {
            addCriterion("sign_longitude not in", values, "signLongitude");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeBetween(Double value1, Double value2) {
            addCriterion("sign_longitude between", value1, value2, "signLongitude");
            return (Criteria) this;
        }

        public Criteria andSignLongitudeNotBetween(Double value1, Double value2) {
            addCriterion("sign_longitude not between", value1, value2, "signLongitude");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeIsNull() {
            addCriterion("sign_latitude is null");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeIsNotNull() {
            addCriterion("sign_latitude is not null");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeEqualTo(Double value) {
            addCriterion("sign_latitude =", value, "signLatitude");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeNotEqualTo(Double value) {
            addCriterion("sign_latitude <>", value, "signLatitude");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeGreaterThan(Double value) {
            addCriterion("sign_latitude >", value, "signLatitude");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeGreaterThanOrEqualTo(Double value) {
            addCriterion("sign_latitude >=", value, "signLatitude");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeLessThan(Double value) {
            addCriterion("sign_latitude <", value, "signLatitude");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeLessThanOrEqualTo(Double value) {
            addCriterion("sign_latitude <=", value, "signLatitude");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeIn(List<Double> values) {
            addCriterion("sign_latitude in", values, "signLatitude");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeNotIn(List<Double> values) {
            addCriterion("sign_latitude not in", values, "signLatitude");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeBetween(Double value1, Double value2) {
            addCriterion("sign_latitude between", value1, value2, "signLatitude");
            return (Criteria) this;
        }

        public Criteria andSignLatitudeNotBetween(Double value1, Double value2) {
            addCriterion("sign_latitude not between", value1, value2, "signLatitude");
            return (Criteria) this;
        }

        public Criteria andSignDistanceIsNull() {
            addCriterion("sign_distance is null");
            return (Criteria) this;
        }

        public Criteria andSignDistanceIsNotNull() {
            addCriterion("sign_distance is not null");
            return (Criteria) this;
        }

        public Criteria andSignDistanceEqualTo(Integer value) {
            addCriterion("sign_distance =", value, "signDistance");
            return (Criteria) this;
        }

        public Criteria andSignDistanceNotEqualTo(Integer value) {
            addCriterion("sign_distance <>", value, "signDistance");
            return (Criteria) this;
        }

        public Criteria andSignDistanceGreaterThan(Integer value) {
            addCriterion("sign_distance >", value, "signDistance");
            return (Criteria) this;
        }

        public Criteria andSignDistanceGreaterThanOrEqualTo(Integer value) {
            addCriterion("sign_distance >=", value, "signDistance");
            return (Criteria) this;
        }

        public Criteria andSignDistanceLessThan(Integer value) {
            addCriterion("sign_distance <", value, "signDistance");
            return (Criteria) this;
        }

        public Criteria andSignDistanceLessThanOrEqualTo(Integer value) {
            addCriterion("sign_distance <=", value, "signDistance");
            return (Criteria) this;
        }

        public Criteria andSignDistanceIn(List<Integer> values) {
            addCriterion("sign_distance in", values, "signDistance");
            return (Criteria) this;
        }

        public Criteria andSignDistanceNotIn(List<Integer> values) {
            addCriterion("sign_distance not in", values, "signDistance");
            return (Criteria) this;
        }

        public Criteria andSignDistanceBetween(Integer value1, Integer value2) {
            addCriterion("sign_distance between", value1, value2, "signDistance");
            return (Criteria) this;
        }

        public Criteria andSignDistanceNotBetween(Integer value1, Integer value2) {
            addCriterion("sign_distance not between", value1, value2, "signDistance");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table sign_location
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table sign_location
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}